generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int        @id @default(autoincrement())
  userName              String
  email                 String     @unique
  password              String
  dateBirth             DateTime
  userImage             String? 
  points                Int        @default(0)
  lastChapterAccessedId Int?        @default(1)

  //sub atributos
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  

  //relações
  chapterProgress  ChapterProgress[]
  lastChapterAccessed  Chapter?   @relation(fields: [lastChapterAccessedId], references: [id], onDelete: SetNull)

  @@map("users")
}

model Trail {
  id        Int        @id @default(autoincrement())
  title     String     @unique

  //sub atributos
  createdAt DateTime   @default(now())

  //relações
  chapters  Chapter[]

  @@map("trails")
}

model Chapter {
  id        Int      @id @default(autoincrement())
  title     String
  trailId   Int

  //sub atributo
  createdAt DateTime @default(now())

  //relações
  trail     Trail    @relation(fields: [trailId], references: [id], onDelete: Cascade)
  quizzes   Quiz[]
  chapterProgress ChapterProgress[]

  @@map("chapters")
  User User[]
}

model Quiz {
  id            Int      @id @default(autoincrement())
  question      String
  options       String[]
  correctAnswer String
  image         String?
  explanation   String
  chapterId     Int

  //relações
  chapter       Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model ChapterProgress{
  id               Int      @id @default(autoincrement())
  chapterId        Int
  userId           Int

  //sub atributos
  createdAt        DateTime @default(now())
  updatedAt        DateTime   @updatedAt

  //relações
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapter          Chapter    @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  // Restrições de unicidade
  @@unique([chapterId, userId]) // a dupla não pode ser repetida, somente individualmente
  @@map("progress")
}