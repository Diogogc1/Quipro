// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  userName       String
  email      String    @unique // Garante que o email seja único
  password   String
  dateBirth  DateTime  // Data de nascimento
  userImage  String?   // URL da imagem do usuário (opcional)
  progress   Progress[]  // Relacionamento com progresso
  ranking    Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("users")
}

model Trail {
  id        Int       @id @default(autoincrement())
  title     String    @unique // Título da trilha único
  chapters  Chapter[] // Relaciona os capítulos dessa trilha
  progress  Progress[]  // Relaciona o progresso dos usuários nessa trilha
  createdAt DateTime  @default(now())

  @@map("trails")
}

model Chapter {
  id        Int       @id @default(autoincrement())
  title     String
  trail     Trail     @relation(fields: [trailId], references: [id], onDelete: Cascade)
  trailId   Int
  quizzes   Quiz[]    // Relaciona os quizzes deste capítulo
  createdAt DateTime  @default(now())

  @@map("chapters")
}

model Quiz {
  id            Int      @id @default(autoincrement())
  question      String   // Texto da pergunta
  options       String[] // Opções de múltipla escolha
  correctAnswer String   // Resposta correta
  image         String?  // URL da imagem da pergunta (opcional)
  explanation   String   // Explicação da resposta
  chapter       Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId     Int

  @@map("quizzes")
}

model Progress {
  id           Int       @id @default(autoincrement())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  trail        Trail     @relation(fields: [trailId], references: [id], onDelete: Cascade)
  trailId      Int
  currentChapterId Int?  // Capítulo atual (opcional)
  completed    Boolean   @default(false) // Se a trilha foi concluída
  trailScore   Int       @default(0)     // Pontuação total na trilha
  passed       Boolean   @default(false) // Se o usuário foi aprovado na trilha
  createdAt    DateTime  @default(now())

  // Garante que um usuário só pode ter um progresso único por trilha
  @@unique([userId, trailId])

  @@map("progress")
}

// model Ranking {
//   id        Int      @id @default(autoincrement())
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int      @unique // Garante que o usuário tenha apenas um ranking único
//   points    Int      @default(0)  // Pontos acumulados

//   @@map("ranking")
// }
//   id             Int      @id @default(autoincrement())
//   email          String   @unique
//   username       String   @unique
//   dateOfBirth    DateTime
//   password       String
// }
// model Aluno {
//   id             Int      @id @default(autoincrement())
//   email          String   @unique
//   nome           String
//   dataNascimento DateTime
//   senha          String
// }

// // Modelo para a tabela de trilhas
// model Trilha {
//   id        Int        @id @default(autoincrement())
//   nome      String
//   concluida Boolean    @default(false)
//   capitulos Capitulo[] // Relacionamento de 1 para N com capítulos
// }

// // Modelo para a tabela de capítulos
// model Capitulo {
//   id        Int        @id @default(autoincrement())
//   nome      String
//   concluido Boolean    @default(false)
//   trilhaId  Int        // Chave estrangeira que referencia Trilha
//   trilha    Trilha     @relation(fields: [trilhaId], references: [id])
// }
